# -*- coding: utf-8 -*-
"""Mohd_Fayaz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toFio-So6tNKSKgozLAkOnaA7TZOhM7y
"""

#Importing all the necessary required Libraries for the project
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#loading the data file downloaded from yahoo finance website
from google.colab import files
files.upload()

#store the data
data = pd.read_csv('EURINR=X.csv')
#set the date as the index
data = data.set_index(pd.DatetimeIndex(data['Date'].values))
#show the data
data

# Calculate Moving Averages (MA)
data['MA_10'] = data['Close'].rolling(window=10).mean()
data['MA_20'] = data['Close'].rolling(window=20).mean()

# Plot Moving Averages
plt.figure(figsize=(10, 6))
plt.plot(data['Close'], label='Close Price')
plt.plot(data['MA_10'], label='10-day MA')
plt.plot(data['MA_20'], label='20-day MA')
plt.title('Moving Averages for EUR/INR')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Calculate Bollinger Bands (BB)
data['BB_middle'] = data['Close'].rolling(window=20).mean()
data['BB_std'] = data['Close'].rolling(window=20).std()
data['BB_upper'] = data['BB_middle'] + 2 * data['BB_std']
data['BB_lower'] = data['BB_middle'] - 2 * data['BB_std']

# Plot Bollinger Bands
plt.figure(figsize=(10, 6))
plt.plot(data['Close'], label='Close Price')
plt.plot(data['BB_upper'], label='BB Upper Band')
plt.plot(data['BB_middle'], label='BB Middle Band')
plt.plot(data['BB_lower'], label='BB Lower Band')
plt.title('Bollinger Bands for EUR/INR')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Calculate Commodity Channel Index (CCI)
tp = (data['High'] + data['Low'] + data['Close']) / 3
data['sma_20'] = tp.rolling(window=20).mean()
data['mean_deviation'] = (tp - data['sma_20']).abs().rolling(window=20).sum()
data['CCI'] = (tp - data['sma_20']) / (0.015 * data['mean_deviation'])

# Plot Commodity Channel Index (CCI)
plt.figure(figsize=(10, 6))
plt.plot(data['CCI'], label='CCI')
plt.axhline(y=100, color='r', linestyle='--', label='Overbought Level')
plt.axhline(y=-100, color='g', linestyle='--', label='Oversold Level')
plt.title('Commodity Channel Index (CCI) for EUR/INR')
plt.xlabel('Date')
plt.ylabel('CCI Value')
plt.legend()
plt.show()

# Initialize a new column for decisions
data['Decision'] = 'Neutral'  # Start with 'Neutral' as the default decision

# Simple decision-making logic
for i in range(len(data)):
    if data['MA_10'][i] > data['MA_20'][i] and data['CCI'][i] > 0:
        data['Decision'][i] = 'Buy'
    elif data['MA_10'][i] < data['MA_20'][i] and data['CCI'][i] < 0:
        data['Decision'][i] = 'Sell'

# Display the buy/sell/neutral cases
print(data['Decision'].value_counts())

# Plot Moving Averages with Buy/Sell/Neutral decisions
plt.figure(figsize=(10, 6))
plt.plot(data['Close'], label='Close Price')
plt.plot(data['MA_10'], label='10-day MA')
plt.plot(data['MA_20'], label='20-day MA')

# Highlight Buy points
plt.scatter(data[data['Decision'] == 'Buy'].index, data[data['Decision'] == 'Buy']['Close'], color='g', label='Buy', marker='^')

# Highlight Sell points
plt.scatter(data[data['Decision'] == 'Sell'].index, data[data['Decision'] == 'Sell']['Close'], color='r', label='Sell', marker='v')

plt.title('Moving Averages with Buy/Sell/Neutral Decisions for EUR/INR')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Filter data for Buy, Sell, and Neutral decisions
buy_data = data[data['Decision'] == 'Buy']
sell_data = data[data['Decision'] == 'Sell']
neutral_data = data[data['Decision'] == 'Neutral']

# Concatenate the dataframes
decision_table = pd.concat([buy_data, sell_data, neutral_data])

# Keep only the necessary columns
decision_table = decision_table[['Decision', 'Close']]

# Rename the columns for clarity
decision_table.columns = ['Decision', 'Price']

# Sort the table by date
decision_table = decision_table.sort_index()

# Display the table
print(decision_table)

# Initialize columns for decisions
data['Moving_Average_Decision'] = 'Neutral'
data['Bollinger_Bands_Decision'] = 'Neutral'
data['CCI_Decision'] = 'Neutral'

# Add your decision-making logic for each indicator
# For example:
for i in range(len(data)):
    if data['MA_10'][i] > data['MA_20'][i]:
        data['Moving_Average_Decision'][i] = 'Buy'
    elif data['MA_10'][i] < data['MA_20'][i]:
        data['Moving_Average_Decision'][i] = 'Sell'

    # Add similar logic for other indicators

# Create the decision table
decision_table = data[['Date', 'Moving_Average_Decision', 'Bollinger_Bands_Decision', 'CCI_Decision']]

# Create a DataFrame to store decisions for each indicator
decision_table = pd.DataFrame()

# Add columns for each indicator
decision_table['Date'] = data.index
decision_table['Moving_Average_Decision'] = data['Moving_Average_Decision']
decision_table['Bollinger_Bands_Decision'] = data['Bollinger_Bands_Decision']
decision_table['CCI_Decision'] = data['CCI_Decision']

# Display the table
print(decision_table)

# Drop rows with NaN values in any of the columns
data_cleaned = data.dropna(subset=['Moving_Average_Decision', 'Bollinger_Bands_Decision', 'CCI_Decision'])

# Create the decision table
decision_table = data_cleaned[['Date', 'Moving_Average_Decision', 'Bollinger_Bands_Decision', 'CCI_Decision']]

# Display the table
print(decision_table)